#!/usr/bin/env bun

import { readFileSync, writeFileSync } from 'fs'
import { join } from 'path'

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ README.md —Ñ–∞–π–ª–∞
 * –ü–∞—Ä—Å–∏—Ç API –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  sourceFile: 'src/Raylib.ts',
  packageFile: 'package.json',
  outputFile: 'README.md',
  examplesDir: 'examples',
  testsDir: 'tests'
}

// –û–ø–∏—Å–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
const LIBRARY_DESCRIPTION = `# Raylib TypeScript Wrapper

TypeScript –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è Raylib —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Bun FFI –∏ Rust-style –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ Result<T, E> —Ç–∏–ø—ã.

## –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

- ü¶Ä **Rust-style error handling** - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ Result<T, E> –∏ Option<T>
- ‚ö° **Bun FFI** - –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–Ω–¥–∏–Ω–≥–∏ —á–µ—Ä–µ–∑ Bun Foreign Function Interface
- üéØ **Type Safety** - –ø–æ–ª–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö API –º–µ—Ç–æ–¥–æ–≤
- üîß **–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- üéÆ **–ü–æ–ª–Ω—ã–π API** - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è, –≤–≤–æ–¥–∞, –∫–æ–ª–ª–∏–∑–∏–π, —Ç–µ–∫—Å—Ç—É—Ä –∏ render texture
- üì¶ **–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä** - –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏
- üß™ **–¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å** - –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞`

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
const INSTALLATION_INSTRUCTIONS = `## –£—Å—Ç–∞–Ω–æ–≤–∫–∞

### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è

- [Bun](https://bun.sh/) runtime
- Raylib –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ (–≤–∫–ª—é—á–µ–Ω–∞ –≤ \`assets/raylib-5.5_macos/lib/\`)
- TypeScript 5+

### –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

\`\`\`bash
bun install
\`\`\`

### –ö–æ–º–ø–∏–ª—è—Ü–∏—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

\`\`\`bash
# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
bun run compile

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç—É—Ä–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
bun run compile:textures
\`\`\``

/**
 * –ü–∞—Ä—Å–∏—Ç –º–µ—Ç–æ–¥—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ Raylib.ts
 */
function parseApiMethods(sourceCode) {
  const methods = []
  
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  const methodRegex = /public\s+(\w+)\s*\([^)]*\):\s*RaylibResult<([^>]+)>/g
  
  let match
  while ((match = methodRegex.exec(sourceCode)) !== null) {
    const [, methodName, returnType] = match
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ—Ç–æ–¥–∞
    const methodStart = sourceCode.indexOf(`public ${methodName}(`)
    const methodEnd = sourceCode.indexOf('): RaylibResult', methodStart)
    const methodSignature = sourceCode.substring(methodStart, methodEnd + 1)
    
    // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const paramsMatch = methodSignature.match(/\(([^)]*)\)/)
    const params = paramsMatch ? paramsMatch[1].split(',').map(p => p.trim()).filter(p => p) : []
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ç–æ–¥–∞
    let category = '–ü—Ä–æ—á–µ–µ'
    if (methodName.includes('Window') || methodName.includes('init') || methodName.includes('close') || methodName.includes('FPS')) {
      category = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–æ–º'
    } else if (methodName.includes('draw') || methodName.includes('clear') || methodName.includes('Drawing')) {
      category = '–†–∏—Å–æ–≤–∞–Ω–∏–µ'
    } else if (methodName.includes('Key') || methodName.includes('Mouse') || methodName.includes('Input')) {
      category = '–í–≤–æ–¥'
    } else if (methodName.includes('Collision') || methodName.includes('check')) {
      category = '–ö–æ–ª–ª–∏–∑–∏–∏'
    } else if (methodName.includes('Texture') || methodName.includes('load') || methodName.includes('unload')) {
      category = '–¢–µ–∫—Å—Ç—É—Ä—ã'
    } else if (methodName.includes('RenderTexture')) {
      category = 'Render Texture'
    }
    
    methods.push({
      name: methodName,
      params,
      returnType,
      category,
      signature: methodSignature.replace('public ', '')
    })
  }
  
  return methods
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
function groupMethodsByCategory(methods) {
  const grouped = {}
  
  methods.forEach(method => {
    if (!grouped[method.category]) {
      grouped[method.category] = []
    }
    grouped[method.category].push(method)
  })
  
  return grouped
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ API
 */
function generateApiDocumentation(methods) {
  const grouped = groupMethodsByCategory(methods)
  let documentation = '## API –ú–µ—Ç–æ–¥—ã\n\n'
  
  // –ü–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const categoryOrder = [
    '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–æ–º',
    '–†–∏—Å–æ–≤–∞–Ω–∏–µ', 
    '–í–≤–æ–¥',
    '–ö–æ–ª–ª–∏–∑–∏–∏',
    '–¢–µ–∫—Å—Ç—É—Ä—ã',
    'Render Texture',
    '–ü—Ä–æ—á–µ–µ'
  ]
  
  categoryOrder.forEach(category => {
    if (grouped[category]) {
      documentation += `### ${category}\n\n`
      
      grouped[category].forEach(method => {
        documentation += `- **\`${method.name}(${method.params.join(', ')})\`** ‚Üí \`Result<${method.returnType}>\`\n`
        documentation += '\n'
      })
    }
  })
  
  return documentation
}

/**
 * –ß–∏—Ç–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ examples
 */
function getExamples() {
  try {
    const examplesPath = join(process.cwd(), CONFIG.examplesDir)
    const files = require('fs').readdirSync(examplesPath)
    
    return files
      .filter(file => file.endsWith('.ts'))
      .map(file => file.replace('.ts', ''))
      .sort()
  } catch (error) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã:', error.message)
    return []
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
 */
function generateExamplesSection(examples) {
  if (examples.length === 0) {
    return '## –ü—Ä–∏–º–µ—Ä—ã\n\n–ü—Ä–∏–º–µ—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n'
  }
  
  let section = '## –ü—Ä–∏–º–µ—Ä—ã\n\n'
  section += '```bash\n'
  
  examples.forEach(example => {
    const scriptName = `example:${example.replace('-', ':')}`
    section += `# ${example.charAt(0).toUpperCase() + example.slice(1).replace('-', ' ')}\n`
    section += `bun run ${scriptName}\n\n`
  })
  
  section += '```\n\n'
  return section
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏ –∏–∑ package.json
 */
function generateScriptsSection(packageJson) {
  const scripts = packageJson.scripts || {}
  
  let section = '## –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n'
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã
  const groups = {
    '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞': ['dev', 'build'],
    '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': ['test', 'test:watch'],
    '–ü—Ä–∏–º–µ—Ä—ã': Object.keys(scripts).filter(key => key.startsWith('example:')),
    '–ö–æ–º–ø–∏–ª—è—Ü–∏—è': ['compile', 'compile:textures']
  }
  
  Object.entries(groups).forEach(([groupName, scriptKeys]) => {
    const groupScripts = scriptKeys.filter(key => scripts[key])
    
    if (groupScripts.length > 0) {
      section += `### ${groupName}\n\n`
      section += '```bash\n'
      
      groupScripts.forEach(key => {
        const description = getScriptDescription(key)
        section += `# ${description}\n`
        section += `bun run ${key}\n\n`
      })
      
      section += '```\n\n'
    }
  })
  
  return section
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞
 */
function getScriptDescription(scriptName) {
  const descriptions = {
    'dev': '–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
    'build': '–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞',
    'test': '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤',
    'test:watch': '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ watch —Ä–µ–∂–∏–º–µ',
    'compile': '–ö–æ–º–ø–∏–ª—è—Ü–∏—è –≤—Å–µ—Ö –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π',
    'compile:textures': '–ö–æ–º–ø–∏–ª—è—Ü–∏—è –º–æ–¥—É–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏',
    'example:basic': '–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
    'example:shapes': '–ü—Ä–∏–º–µ—Ä —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ñ–∏–≥—É—Ä',
    'example:mouse': '–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –º—ã—à—å—é',
    'example:multiple-textures': '–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏',
    'example:texture-manager': '–ü—Ä–∏–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–∫—Å—Ç—É—Ä'
  }
  
  return descriptions[scriptName] || scriptName.replace(':', ' ')
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
function generateUsageExample() {
  return `## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä

\`\`\`typescript
import Raylib from "./src/Raylib"
import { Colors } from "./src/constants"

const rl = new Raylib()

// Rust-style error handling
const result = rl.initWindow(800, 450, '–ú–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')
  .andThen(() => rl.setTargetFPS(60))
  .andThen(() => {
    // –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    while (true) {
      const shouldClose = rl.windowShouldClose().unwrapOr(true)
      if (shouldClose) break

      rl.beginDrawing()
        .andThen(() => rl.clearBackground(Colors.WHITE))
        .andThen(() => rl.drawText("–ü—Ä–∏–≤–µ—Ç, Raylib!", 190, 200, 20, Colors.BLACK))
        .andThen(() => rl.endDrawing())
        .match(
          () => {}, // –£—Å–ø–µ—Ö - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
          (error) => {
            console.error('–û—à–∏–±–∫–∞ –∫–∞–¥—Ä–∞: [' + error.kind + '] ' + error.message)
            return // –í—ã—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          }
        )
    }
    return rl.closeWindow()
  })

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
result.match(
  () => console.log('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'),
  (error) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã: [' + error.kind + '] ' + error.message)
    if (error.context) console.error('–ö–æ–Ω—Ç–µ–∫—Å—Ç: ' + error.context)
  }
)
\`\`\`

### Result API

\`\`\`typescript
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
if (result.isOk()) {
  console.log('–£—Å–ø–µ—Ö:', result.value)
} else {
  console.error('–û—à–∏–±–∫–∞:', result.error)
}

// Pattern matching
result.match(
  (value) => console.log('–£—Å–ø–µ—Ö:', value),
  (error) => console.error('–û—à–∏–±–∫–∞:', error.message)
)

// –¶–µ–ø–æ—á–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
result
  .andThen(value => anotherOperation(value))
  .andThen(value => yetAnotherOperation(value))
  .match(
    (finalValue) => console.log('–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω—ã'),
    (error) => console.error('–û–¥–Ω–∞ –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:', error)
  )

// –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const position = rl.getMousePosition().unwrapOr({ x: 0, y: 0 })
\`\`\`

`
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
 */
function generateProjectStructure() {
  return `## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

\`\`\`
src/
‚îú‚îÄ‚îÄ index.ts              # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îú‚îÄ‚îÄ Raylib.ts             # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å Result API
‚îú‚îÄ‚îÄ result.ts             # Result<T, E> –∏ Option<T> —Ç–∏–ø—ã
‚îú‚îÄ‚îÄ utils.ts              # –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Result
‚îú‚îÄ‚îÄ raylib-ffi.ts         # FFI –±–∏–Ω–¥–∏–Ω–≥–∏
‚îú‚îÄ‚îÄ types.ts              # TypeScript —Ç–∏–ø—ã –∏ –æ—à–∏–±–∫–∏
‚îú‚îÄ‚îÄ constants.ts          # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (—Ü–≤–µ—Ç–∞, –∫–ª–∞–≤–∏—à–∏)
‚îú‚îÄ‚îÄ validation.ts         # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
‚îú‚îÄ‚îÄ math/                 # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã
‚îÇ   ‚îú‚îÄ‚îÄ Vector2.ts        # 2D –≤–µ–∫—Ç–æ—Ä
‚îÇ   ‚îî‚îÄ‚îÄ Rectangle.ts      # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
‚îî‚îÄ‚îÄ wrappers/             # –ù–∞—Ç–∏–≤–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏
    ‚îú‚îÄ‚îÄ texture-wrapper.c # –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç—É—Ä
    ‚îî‚îÄ‚îÄ render-texture-wrapper.c # –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è render texture

examples/
‚îú‚îÄ‚îÄ basic.ts              # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
‚îú‚îÄ‚îÄ shapes.ts             # –ü—Ä–∏–º–µ—Ä —Å —Ñ–∏–≥—É—Ä–∞–º–∏
‚îú‚îÄ‚îÄ mouse-input.ts        # –ü—Ä–∏–º–µ—Ä —Å –º—ã—à—å—é
‚îú‚îÄ‚îÄ multiple-textures.ts  # –ü—Ä–∏–º–µ—Ä —Å —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏
‚îî‚îÄ‚îÄ texture-manager-demo.ts # –î–µ–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–∫—Å—Ç—É—Ä

tests/
‚îú‚îÄ‚îÄ raylib.test.ts        # –¢–µ—Å—Ç—ã Raylib API
‚îú‚îÄ‚îÄ utils.test.ts         # –¢–µ—Å—Ç—ã —É—Ç–∏–ª–∏—Ç
‚îú‚îÄ‚îÄ texture.test.ts       # –¢–µ—Å—Ç—ã —Ç–µ–∫—Å—Ç—É—Ä
‚îî‚îÄ‚îÄ render-texture.test.ts # –¢–µ—Å—Ç—ã render texture

assets/
‚îú‚îÄ‚îÄ raylib-5.5_macos/     # Raylib –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è macOS
‚îú‚îÄ‚îÄ textures/             # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã
‚îú‚îÄ‚îÄ texture-wrapper.dylib # –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä
‚îî‚îÄ‚îÄ render-texture-wrapper.dylib # –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ render texture
\`\`\`

`
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ README
 */
function generateReadme() {
  console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è README.md...')
  
  try {
    // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    const sourceCode = readFileSync(CONFIG.sourceFile, 'utf-8')
    const packageJson = JSON.parse(readFileSync(CONFIG.packageFile, 'utf-8'))
    
    // –ü–∞—Ä—Å–∏–º API –º–µ—Ç–æ–¥—ã
    console.log('üìñ –ü–∞—Ä—Å–∏–Ω–≥ API –º–µ—Ç–æ–¥–æ–≤...')
    const methods = parseApiMethods(sourceCode)
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${methods.length} –º–µ—Ç–æ–¥–æ–≤`)
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    console.log('üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤...')
    const examples = getExamples()
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${examples.length} –ø—Ä–∏–º–µ—Ä–æ–≤`)
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏ README
    console.log('üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...')
    
    const readmeContent = [
      LIBRARY_DESCRIPTION,
      '',
      INSTALLATION_INSTRUCTIONS,
      '',
      generateUsageExample(),
      generateApiDocumentation(methods),
      generateExamplesSection(examples),
      generateScriptsSection(packageJson),
      generateProjectStructure(),
      '## –õ–∏—Ü–µ–Ω–∑–∏—è',
      '',
      'MIT License',
      '',
      '## –í–∫–ª–∞–¥ –≤ –ø—Ä–æ–µ–∫—Ç',
      '',
      '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è pull requests –∏ issues! –ü–µ—Ä–µ–¥ –≤–Ω–µ—Å–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π:',
      '',
      '1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: \`bun test\`',
      '2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–æ–¥ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏–Ω—Ç–∏–Ω–≥',
      '3. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
      '',
      '---',
      '',
      '*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é \`bun run scripts/generate-readme.js\`*'
    ].join('\n')
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º README
    writeFileSync(CONFIG.outputFile, readmeContent, 'utf-8')
    
    console.log(`‚úÖ README.md —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! (${readmeContent.length} —Å–∏–º–≤–æ–ª–æ–≤)`)
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`)
    console.log(`   - API –º–µ—Ç–æ–¥–æ–≤: ${methods.length}`)
    console.log(`   - –ü—Ä–∏–º–µ—Ä–æ–≤: ${examples.length}`)
    console.log(`   - –°–∫—Ä–∏–ø—Ç–æ–≤: ${Object.keys(packageJson.scripts || {}).length}`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ README:', error.message)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.main) {
  generateReadme()
}

export { generateReadme }